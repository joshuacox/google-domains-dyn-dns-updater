#!/bin/bash
### Update Google Domains DNS "Synthetic record"
### Google Dynamic DNS: https://support.google.com/domains/answer/6147083
### Synthetic Records: https://support.google.com/domains/answer/6069273
set -eu

config_checker () {
  # check if configs exist
  # if so source them
  CONFIG_TO_CHECK=$1
  if [ -f "$CONFIG_TO_CHECK" ]; then
    . "$CONFIG_TO_CHECK"
  fi
}

config_checker /etc/google_domains_dynamic/config
config_checker $HOME/.google_domains_dynamic/config

# Check update ip cache path and ensure it exists
: ${updater_ip_cache_path:=$HOME/.google_domains_dynamic}
mkdir -p "$updater_ip_cache_path"
: ${updater_ip_cache:=$updater_ip_cache_path/last_ip}

# Ensure our configs set these variables
if [[ -z "$GOOGLE_DOMAINS_USERNAME" ]]; then
  echo 'username not set, exiting'
  exit 1
fi
if [[ -z "$GOOGLE_DOMAINS_PASSWORD" ]]; then
  echo 'password not set, exiting'
  exit 1
fi
if [[ -z "$GOOGLE_DOMAINS_HOSTNAME" ]]; then
  echo 'hostname not set, exiting'
  exit 1
fi

# check our last_ip if it exists
if [[ -f "${updater_ip_cache}" ]]; then
  last_IP=$( cat ${updater_ip_cache})
else
  last_IP="no ip set"
fi

curlr () {
  #echo $1
  IP=$(curl -sL -4 $1)
}

aws () {
  echo aws
  curlr checkip.amazonaws.com
}
icanhazip () {
  echo icanhazip 
  curlr icanhazip.com
}
wtfismyip () {
  echo wtfismyip
  curlr wtfismyip.com/text
}
opendns () {
  echo opendns
  IP=$( dig +short myip.opendns.com @resolver1.opendns.com )
}
googlens1 () {
  echo opendns
  IP=$(dig -4 TXT +short o-o.myaddr.l.google.com @ns1.google.com)
}
dnsomatic () {
  echo wtfismyip
  curlr https://myip.dnsomatic.com
}
opendns2jq () {
  echo opendns
  IP=$(curl -sL -4 https://myipv4.p1.opendns.com/get_my_ip | jq '.ip')
}

ip_methods=("aws")
ip_methods+=("icanhazip")
ip_methods+=("wtfismyip")
ip_methods+=("opendns")
ip_methods+=("googlens1")
ip_methods+=("dnsomatic")
which jq > /dev/null
if [[ $? -eq 0 ]]; then
  ip_methods+=("opendns2jq")
fi
#echo ${ip_methods[@]}
IP=''
count=0
while [[ -z $IP ]]; do
  export IP_method=${ip_methods[ $RANDOM % ${#ip_methods[@]} ]}
  # Resolve current public IP
  ${IP_method}
  ((++count))
  if [[ $count -gt 10 ]]; then
    echo something wrong. aborting
    exit 1
  fi
done

if [[ -z $IP ]]; then
  echo "IP is $IP empty! Investigate IP fetch methods"
  exit 1
else
  echo "IP is $IP"
fi

# Check the two IPs to see if they are equal
if [[ "$last_IP" != "$IP" ]]; then
  # They are not equal so update the IP
  echo "$IP" > "${updater_ip_cache}"
  # Update Google DNS Record
  AGENT="Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/81.0"
  URL="https://${GOOGLE_DOMAINS_USERNAME}:${GOOGLE_DOMAINS_PASSWORD}@domains.google.com/nic/update?hostname=${GOOGLE_DOMAINS_HOSTNAME}&myip=${IP}"
  RESULT=$(curl -A "$AGENT" -s "$URL")
  if [[ "$RESULT" == "good $IP" ]]; then
    echo "Successful Update -- $RESULT"
  elif [[ "$RESULT" == "nochg $IP" ]]; then
    echo "No Change -- $RESULT"
  else
    echo "Failure result = $RESULT"
    exit 1
  fi
else
  echo No change in IP
fi
